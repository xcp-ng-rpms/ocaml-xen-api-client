diff --git c/lwt/disk.ml w/lwt/disk.ml
index 5a908fd..2539e3b 100644
--- c/lwt/disk.ml
+++ w/lwt/disk.ml
@@ -37,7 +37,8 @@ let uri ~pool ~authentication ~vdi =
 
 let socket sockaddr =
   let family = match sockaddr with
-    | Lwt_unix.ADDR_INET(_, _) -> Unix.PF_INET
+    | Lwt_unix.ADDR_INET(_, _) ->
+      Unix.domain_of_sockaddr sockaddr
     | Lwt_unix.ADDR_UNIX _ -> Unix.PF_UNIX in
   Lwt_unix.socket family Unix.SOCK_STREAM 0
 
@@ -48,9 +49,12 @@ let start_upload ~chunked ~uri =
     | x -> failwith (Printf.sprintf "Unsupported URI scheme: %s" (match x with None -> "None" | Some x -> x)) in
   let port = match Uri.port uri with None -> (if use_ssl then 443 else 80) | Some port -> port in
   let host = match Uri.host uri with None -> failwith "Please supply a host in the URI" | Some host -> host in
-
-  Lwt_unix.gethostbyname host >>= fun host_entry ->
-  let sockaddr = Lwt_unix.ADDR_INET(host_entry.Lwt_unix.h_addr_list.(0), port) in
+  let host = Scanf.ksscanf host (fun _ _ -> host) "[%s@]" Fun.id in
+  Lwt_unix.getaddrinfo host (string_of_int port) [] >>= fun he ->
+  let sockaddr = match he with
+  | [] -> raise Not_found
+  | addrinfo :: _ -> addrinfo.Unix.ai_addr
+  in
   let sock = socket sockaddr in
   Lwt.catch (fun () ->
      Lwt_unix.connect sock sockaddr
@@ -89,4 +93,3 @@ let start_upload ~chunked ~uri =
       then return c
       else fail (Failure (Code.reason_phrase_of_code code))
   end
-
diff --git c/lwt/xen_api_lwt_unix.ml w/lwt/xen_api_lwt_unix.ml
index 5fd1768..eda1429 100644
--- c/lwt/xen_api_lwt_unix.ml
+++ w/lwt/xen_api_lwt_unix.ml
@@ -62,12 +62,17 @@ module Lwt_unix_IO = struct
     Ssl.create_context Ssl.TLSv1_2 Ssl.Client_context
 
   let open_connection uri =
-    let domain_addr_t = match Uri.host uri with
+    let domain_addr_t port = match Uri.host uri with
       | Some host ->
         Lwt.catch
           (fun () ->
-             Lwt_unix.gethostbyname host >>= fun host_entry ->
-             return (host_entry.Lwt_unix.h_addrtype, host_entry.Lwt_unix.h_addr_list.(0)))
+             let host = Scanf.ksscanf host (fun _ _ -> host) "[%s@]" Fun.id in
+             Lwt_unix.getaddrinfo host (string_of_int port) [] >>= fun he ->
+             let sockaddr = match he with
+             | [] -> raise Not_found
+             | addrinfo :: _ -> addrinfo.Unix.ai_addr
+             in
+             return ((Unix.domain_of_sockaddr sockaddr), sockaddr))
           (fun _ -> fail (Failed_to_resolve_hostname host))
       | None -> fail (Failed_to_resolve_hostname "") in
     (match Uri.scheme uri with
@@ -83,8 +88,8 @@ module Lwt_unix_IO = struct
      | Some "file" ->
        return (Unix.PF_UNIX, Unix.ADDR_UNIX (Uri.path uri))
      | Some "http" | Some "https" ->
-       domain_addr_t >>= fun (domain, addr) ->
-       return (domain, Unix.ADDR_INET(addr, port))
+       domain_addr_t port >>= fun (domain, sockaddr) ->
+       return (domain, sockaddr)
      | _ -> assert false) >>= fun (domain, sockaddr) ->
 
     if ssl then begin
